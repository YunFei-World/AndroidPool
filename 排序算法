时间复杂度：
    平方阶(O(n2)):             插入排序、选择排序、冒泡排序
    线性对数阶(O(nlogn2)):      快速排序、堆排序、归并排序
    (O(n1+*):（*属于0～1之间常数）希尔排序
    线性阶(O(n)):              基数排序 （还有桶排序、箱排序）

稳定性：
    稳定：  冒泡排序、插入排序、归并排序、计数排序、桶排序、基数排序
    不稳定：快速排序、希尔排序、堆排序、选择排序

额外内存占用：
    内存排序：     冒泡排序、选择排序、插入排序、希尔排序、快速排序、堆排序
    需额外内存排序：归并排序、计数排序、桶排序、基数排序

1 快速排序（找基准）

  时间复杂度：O(nlogn)   【O(nlogn)-O(n2)】
  空间复杂度：O(logn)
  排序方式：  In-place
  稳定性：    不稳定
public class QuickSort{
  public void sort(int[] arr){
    return quickSort(arr, 0, arr.length-1);
  }

  private int[] quickSort(int[] arr, int left, int right){
    if(left < right){
      int partitionIndex = partition(arr,left,right);
      quickSort(arr,left,partitionIndex-1);
      quickSort(arr,partitionIndex+1,right);
    }
    return arr;
  }
  
  private int partition(int[] arr, int left ,int right){
    int pivot = left;
    int index = pivot + 1;
    fot(int i = index ; i<=right; i++){
      if(arr[i]<arr[pivot]){
          swap(arr, i, pivot);
          index++;
      }
    }
    
    swap(arr, pivot, index-1);
    return index-1;
  }

  private void swap(int[] arr, int i,int j){
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  
  }


}
